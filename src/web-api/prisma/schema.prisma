// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_CONNECTION_STRING")
}

model User {
  id             String               @id @default(uuid())
  email          String               @unique
  username       String               @unique
  salt           String
  hash           String
  role           UserRole?
  score          Decimal              @default(0) @db.Decimal(10, 2)
  RoundAnswer    RoundAnswer[]
  FavoriteRounds UserFavoriteRounds[]

  @@map("Users")
}

model Round {
  id             String               @id @default(uuid())
  myHand         Json
  opponentsHands Json
  board          Json
  odds           Decimal              @db.Decimal(5, 2)
  timestamp      DateTime             @default(now())
  RoundAnswer    RoundAnswer[]
  FavoriteRounds UserFavoriteRounds[]

  @@map("Rounds")
}

model RoundAnswer {
  id String @id @default(uuid())

  estimate  Decimal  @db.Decimal(5, 2)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  round     Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)
  roundId   String
  timestamp DateTime @default(now())

  @@map("RoundAnswers")
}

model UserFavoriteRounds {
  round   Round  @relation(fields: [roundId], references: [id], onDelete: Cascade)
  roundId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@id([roundId, userId])
}

model UserRole {
  id        String @id @default(uuid())
  role      Int
  user      User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String @unique

  @@map("UserRoles")
}

model Event {
  id        String   @id @default(uuid())
  type      String
  payload   Json
  timestamp DateTime @default(now())

  @@map("Events")
}
